// Generated by gencpp from file ros_generated/gimbal.msg
// DO NOT EDIT!


#ifndef ROS_GENERATED_MESSAGE_GIMBAL_H
#define ROS_GENERATED_MESSAGE_GIMBAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_generated
{
template <class ContainerAllocator>
struct gimbal_
{
  typedef gimbal_<ContainerAllocator> Type;

  gimbal_()
    : pitch(0)
    , roll(0)
    , yaw(0)  {
    }
  gimbal_(const ContainerAllocator& _alloc)
    : pitch(0)
    , roll(0)
    , yaw(0)  {
  (void)_alloc;
    }



   typedef int8_t _pitch_type;
  _pitch_type pitch;

   typedef int8_t _roll_type;
  _roll_type roll;

   typedef int8_t _yaw_type;
  _yaw_type yaw;




  typedef boost::shared_ptr< ::ros_generated::gimbal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_generated::gimbal_<ContainerAllocator> const> ConstPtr;

}; // struct gimbal_

typedef ::ros_generated::gimbal_<std::allocator<void> > gimbal;

typedef boost::shared_ptr< ::ros_generated::gimbal > gimbalPtr;
typedef boost::shared_ptr< ::ros_generated::gimbal const> gimbalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_generated::gimbal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_generated::gimbal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_generated

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'ros_generated': ['/home/jj/Projects/catkin_workspace/src/ros_generated/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::ros_generated::gimbal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_generated::gimbal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_generated::gimbal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_generated::gimbal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_generated::gimbal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_generated::gimbal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_generated::gimbal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a20579b2257f6db01764fd35cc812867";
  }

  static const char* value(const ::ros_generated::gimbal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa20579b2257f6db0ULL;
  static const uint64_t static_value2 = 0x1764fd35cc812867ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_generated::gimbal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_generated/gimbal";
  }

  static const char* value(const ::ros_generated::gimbal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_generated::gimbal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 pitch\n\
int8 roll\n\
int8 yaw\n\
";
  }

  static const char* value(const ::ros_generated::gimbal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_generated::gimbal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct gimbal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_generated::gimbal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_generated::gimbal_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int8_t>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<int8_t>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_GENERATED_MESSAGE_GIMBAL_H
